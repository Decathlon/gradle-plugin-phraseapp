package phrase

import org.gradle.api.Action
import org.gradle.api.Project
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.MapProperty
import org.gradle.api.provider.Property
import phraseapp.internal.Platform
import phraseapp.network.*
import phraseapp.parsers.xml.DEFAULT_IGNORE_COMMENTS

fun Project.phrase(configure: Action<PhraseExtension>): Unit
    = extensions.configure("phrase", configure)

abstract class PhraseExtension {
    /**
     * Project id of your PhraseApp project.
     */
    abstract val projectId: Property<String>
    /**
     * Authentication token used to communicate with PhraseApp.
     */
    abstract val authToken: Property<String>
    /**
     * Target locations to print all translations from PhraseApp.
     * If you use this property, the plugin will use strings.xml
     * file by default in the target resource folder.
     * If you have multiple strings files in one of your resource
     * folder, you can use `resFoldersMultiStrings` property.
     * @see resFoldersMultiStrings
     */
    abstract val resFolders: ListProperty<String>
    /**
     * Target location to get print all translations from PhraseApp
     * and to fetch default strings files in all resource folders.
     */
    abstract val resFoldersMultiStrings: MapProperty<String, List<String>>
    /**
     * Generate the output adapted to the platform.
     */
    abstract val platform: Property<Platform>
    /**
     * Download the default locale from PhraseApp and write it on the disk with the download task.
     * By default, we don't override the default file.
     */
    abstract val overrideDefaultFile: Property<Boolean>
    /**
     * Phrase base url to consume Phrase API.
     * Optional parameter. Default value: https://api.phrase.com/api
     */
    abstract val phraseBaseUrl: Property<String>
    /**
     * If you don't use the upload task, you don't need to fill this property.
     */
    abstract val mainLocaleId: Property<String?>
    /**
     * If you aren't interested by the json file generated by the download task, you don't
     * need to fill this property.
     */
    abstract val outputLocation: Property<String?>
    /**
     * If you want to convert a PhraseApp locale to your custom locale, add it into this map.
     * For example: ['zh-CN': 'zh-Hans']
     */
    abstract val exceptions: MapProperty<String, String>
    /**
     * If you want to convert all placeholder into your platform's placeholder, switch this
     * parameter to true. Default: false.
     */
    abstract val placeholder: Property<Boolean>
    /**
     * If you want to specify your custom locale in the name of a PhraseApp locale, you can
     * specify the regex of your PhraseApp locale name here. Default: .+_([a-z]{2}-[A-Z]{2})
     */
    abstract val localeNameRegex: Property<String>
    /**
     * If you want to omit comments in translation files. Default: false
     */
    abstract val ignoreComments: Property<Boolean>
    /**
     * If you want to import only some locales during the download task. Skip param to fetch all locales.
     * For example: ['cs-CZ', 'fr-FR', 'de-DE']
     */
    abstract val allowedLocaleCodes: ListProperty<String>

    init {
        resFolders.convention(arrayListOf())
        resFoldersMultiStrings.convention(mapOf())
        platform.convention(Platform.ANDROID)
        overrideDefaultFile.convention(DEFAULT_OVERRIDE_DEFAULT_FILE)
        phraseBaseUrl.convention(PHRASEAPP_BASEURL)
        exceptions.convention(DEFAULT_EXCEPTIONS)
        placeholder.convention(DEFAULT_PLACEHOLDER)
        localeNameRegex.convention(DEFAULT_REGEX)
        ignoreComments.convention(DEFAULT_IGNORE_COMMENTS)
        allowedLocaleCodes.convention(DEFAULT_ALLOWED_LOCALE_CODES)
    }
}
